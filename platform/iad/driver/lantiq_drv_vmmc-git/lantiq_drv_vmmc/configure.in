#
#
#                            Copyright (c) 2006-2016
#                       Lantiq Beteiligungs-GmbH & Co.KG
#                            http://www.lantiq.com
#
#  For licensing information, see the file 'LICENSE' in the root folder of
#  this software module.
#
#

AC_PREREQ(2.59)
AC_COPYRIGHT([Copyright (C) 2006-2016, Lantiq Beteiligungs-GmbH & Co.KG
For licensing information please see the file 'LICENSE' in the root folder of
this software module.])

AC_INIT([VMMC Device Driver],[1.21.2.0],[Lantiq Beteiligungs-GmbH & Co.KG],[drv_vmmc])
AC_CONFIG_SRCDIR(src/drv_vmmc_int.c)
AM_INIT_AUTOMAKE([-Wno-portability])

m4_pattern_allow([^AM_ACLOCAL_INCLUDE$])
AM_ACLOCAL_INCLUDE(m4)

# save the configure arguments
# remove the install dir from the distcheck configure line to avoid that the
# installed binaries are deleted on distcheck. The regex will remove
# --prefix and all subsequent "non-space" chars from the configure options
# as well as the internal features.
# Note: The escaped \' are important.
CONFIGURE_OPTIONS=''
for c_arg in $ac_configure_args; do
   case $c_arg in
      \'--prefix=* | \'--enable-el_debug\')
         #echo "skipping configure option for distcheck: $c_arg"
         ;;
      *)
         CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $c_arg"
         ;;
   esac
done
AC_SUBST(CONFIGURE_OPTIONS)

AC_CONFIG_HEADER(drv_config.h)

if [[ "$CFLAGS" == "" ]] ; then
   CFLAGS="-O2"
fi

AC_PROG_CC
AM_PROG_CC_C_O

AH_TOP(
[/******************************************************************************

                            Copyright (c) 2006-2016
                        Lantiq Beteiligungs-GmbH & Co.KG
                             http://www.lantiq.com

  For licensing information, see the file 'LICENSE' in the root folder of
  this software module.

******************************************************************************/
#ifndef _DRV_CONFIG_H_
#define _DRV_CONFIG_H_]
)

AH_BOTTOM([
#endif /* _DRV_CONFIG_H_ */
])

AC_DEFINE_UNQUOTED([VMMC_CONFIGURE_STR], ["$ac_configure_args"], [configure options string])

dnl set kernel include and build directories
dnl enable linux kernel 2.6.x support (Make sure AC_PROG_CC is defined before to set $CC!)
KERNEL_CHECK_CONFIG

dnl Set lib_ifxos include path
LIBIFXOS_CHECK_CONFIG_INCL

dnl enable obsolete data channel premapping - [disable]d by default
OBSOLETE_PREMAPPING_CHECK( [disable] )

dnl enable compiler warnings
WARNINGS_CHECK

dnl enable debugging mode
DEBUG_CHECK

dnl enable use of proc filesystem entries
PROC_CHECK(VMMC_USE_PROC)

dnl enable user configuration
USER_CONFIG_CHECK

dnl set HL TAPI include path
DRV_TAPI_INCL_CHECK_FOR_LL_DRV

dnl set MPS include path
DRV_MPS_INCL_CHECK_FOR_LL_DRV

dnl set the maximum number of devices supported
MAX_DEVICES_CHECK(VMMC, VMMC_MAX_DEVICES)

dnl enable evaluation features
EVALUATION_CHECK

dnl enable runtime traces
TRACE_CHECK(
    AC_DEFINE([RUNTIME_TRACE],[1],[enable runtime traces as register access])
)

dnl enable LINUX MODULE support
KERNEL_MODULE_CHECK

dnl check for build as platform driver with device tree support
LINUX_PLATFORM_DRIVER_CHECK( [disable] )

dnl enable owner id for packet interface.
TAPI_PKG_OWNER_ID_CHECK( [disable] )

dnl TAPI features
AM_CONDITIONAL(TAPI, true)
AC_DEFINE([TAPI],[1],[enable TAPI interface])

dnl enable full TAPI linetesting support
TAPI_LT_CHECK([disable], TAPI_LT,
        [AC_DEFINE([TAPI],[1],[enable TAPI Interface])
         AM_CONDITIONAL(TAPI, true)]
)

dnl enable TAPI FXS Phone Detection Support
TAPI_PHONE_DET_CHECK(
        [disable], # default
        [AC_DEFINE([TAPI],[1],[enable TAPI Interface])
         AM_CONDITIONAL(TAPI, true)]
)

dnl enable TAPI HDLC features
hdlc_enabled=false
TAPI_HDLC_CHECK(
        [disable], # default
        [AC_DEFINE([TAPI],[1],[enable TAPI interface])
         AM_CONDITIONAL(TAPI, true)
         AC_DEFINE([HDLC_SUPPORT],[1],[enable HDLC support (implicitly enables KPI)])
         TAPI_HDLC_IDLE_PATTERN_CHECK([yes])],
        [TAPI_HDLC_IDLE_PATTERN_CHECK([no])]
)

dnl enable TAPI DTMF support
TAPI_DTMF_CHECK([enable], # default
       [AC_DEFINE([TAPI],[1],[enable TAPI Interface])
        AM_CONDITIONAL(TAPI, true)]
)

dnl enable TAPI CID support
TAPI_CID_CHECK(
        [enable], # default
        [AC_DEFINE([TAPI],[1],[enable TAPI interface])
        AM_CONDITIONAL(TAPI, true)]
)

dnl enable TAPI METERING support
TAPI_METERING_CHECK(
        [disabled], # default
        [AC_DEFINE([TAPI],[1],[enable TAPI interface])
         AM_CONDITIONAL(TAPI, true)]
)

dnl enable TAPI FAX support
TAPI_FAX_CHECK(
        [enable], # default
        [AC_DEFINE([TAPI],[1],[enable TAPI Interface])
         AM_CONDITIONAL(TAPI, true)]
)

dnl enable TAPI FAX support
TAPI_FAXSTACK_CHECK(
        [enable], # default
        [AC_DEFINE([TAPI],[1],[enable TAPI Interface])
         AM_CONDITIONAL(TAPI, true)]
)


dnl enable TAPI Analog Line Continuous Measurement support
TAPI_CONT_MEAS_CHECK(
        [disable], # default
        [AC_DEFINE([TAPI],[1],[enable TAPI Interface])
         AM_CONDITIONAL(TAPI, true)]
)

dnl enable event logger debugging
EVENT_LOGGER_CHECK_CONFIG

dnl enable analog line module support support (must be disabled for INCA-IP2)
AC_MSG_CHECKING(for ALM support)
AC_ARG_ENABLE(alm,
    AS_HELP_STRING(
        [--enable-alm],
        [enable ALM connection]
    ),
    [
        if test $enableval = 'yes'; then
            AC_MSG_RESULT(enabled)
            AC_DEFINE([VMMC_ALM_EN],[1],[enable ALM support])
        else
            AC_MSG_RESULT(disabled)
        fi
    ],
    [
        dnl enable automatically:
        AC_MSG_RESULT([enabled (default), disable with --disable-alm])
        AC_DEFINE([VMMC_ALM_EN],[1],[enable ALM connection support])
    ]
)

dnl enable Kernel Packet Interface (KPI) - [disable]d by default
TAPI_KPI_CHECK( [disable] )

dnl enable RTCP_XR support - [disable]d by default
TAPI_RTCP_XR_CHECK( [disable] )

dnl PCM channel support - [enable]d by default
TAPI_PCM_CHECK( [enable] )

dnl enable DECT channel support - [disable]d by default
TAPI_DECT_CHECK( [disable] )

dnl disable DECT nibble swap for COSIC modem - [enabled]d by default
TAPI_DECT_NIBBLE_SWAP_CHECK( [enable] )

dnl enable PMU support - [disable]d by default
TAPI_PMU_CHECK( [disable] )

dnl enable PMC support
TAPI_PMC_CHECK( [disable] )

dnl Check for type of interface to PMC
TAPI_PMC_IF_CHECK()

dnl enable calibration support - [disable]d by default
CALIBRATION_CHECK( [disable] )

dnl MPS history buffer (default=128 words, maximum=512 words, 0=disable)]
MPS_HISTORY_CHECK

dnl enable TAPI announcements support
TAPI_ANNOUNCEMENTS_CHECK(
        [enable], # default
        [AC_DEFINE([TAPI],[1],[enable TAPI Interface])
         AM_CONDITIONAL(TAPI, true)]
)

dnl enable active line mode for FXO
AC_MSG_CHECKING(for initial FXO active line mode)
AC_ARG_ENABLE(fxo-act,
    AS_HELP_STRING(
        [--enable-fxo-act],
        [enable initial FXO active line mode (default enabled)]
    ),
    [
        if test $enableval = 'yes' -o $enableval = ''; then
            AC_MSG_RESULT(enabled)
            AC_DEFINE([VMMC_ACT_FXO],[1],[enable initial FXO active line mode])
        else
            AC_MSG_RESULT(disabled)
        fi
    ],
    [
        dnl enable automatically:
        AC_MSG_RESULT(enabled (default), disable with --disable-fxo-act)
        AC_DEFINE([VMMC_ACT_FXO],[1],[enable initial FXO active line mode])
    ]
)

TAPI_SLIC_CHECK()

dnl disable automatic data channel connection - [disable]d by default
TAPI_AUTO_DATA_MAP_CHECK( [enable] )

AC_DEFINE([VMMC],[1],[enable VMMC support])

AM_CONDITIONAL(DANUBE, false)
AM_CONDITIONAL(AR9, false)
AM_CONDITIONAL(VR9, false)
AM_CONDITIONAL(FALCON, false)
AM_CONDITIONAL(XRX300, false)
AC_ARG_WITH(device,
   AS_HELP_STRING(
      [--with-device=DANUBE|TWINPASS|AR9|VR9|FALCON|XRX300],
      [Set device type]
   ),
   [
         case $withval in
           DANUBE)
               AC_MSG_RESULT(DANUBE device is used);
               AC_DEFINE([SYSTEM_DANUBE],[1],[enable Danube specific code])
               AM_CONDITIONAL(DANUBE, true)
           ;;
           TWINPASS)
               AC_MSG_RESULT(DANUBE device is used);
               AC_DEFINE([SYSTEM_DANUBE],[1],[enable Danube specific code])
               AM_CONDITIONAL(DANUBE, true)
           ;;
           AR9)
               AC_MSG_RESULT(AR9 device is used);
               AC_DEFINE([SYSTEM_AR9],[1],[enable AR9 specific code])
               AM_CONDITIONAL(AR9, true)
           ;;
           VR9)
               AC_MSG_RESULT(VR9 device is used);
               AC_DEFINE([SYSTEM_VR9],[1],[enable VR9 specific code])
               AM_CONDITIONAL(VR9, true)
           ;;
           XRX300)
               AC_MSG_RESULT(xRX300 device is used);
               AC_DEFINE([SYSTEM_XRX300],[1],[enable xRX300 specific code])
               AM_CONDITIONAL(XRX300, true)
           ;;
           FALCON)
               AC_MSG_RESULT(FALCON device is used);
               AC_DEFINE([SYSTEM_FALCON],[1],[enable FALCON specific code])
               AM_CONDITIONAL(FALCON, true)
           ;;
           *)
               AC_MSG_ERROR([Unrecognised device type! Valid choices are AR9|VR9|XRX300]);
           ;;
         esac
   ],
   [
      AM_CONDITIONAL(AR9, true)
   ]
)

dnl set additional (device specific) CFLAGS
WITH_CFLAGS_CHECK

AC_DEFINE_UNQUOTED([WITH_CLFAGS_CONFIGURE_OPTION],[$CFLAGS],[environment and device specific CFLAGS passed to configure])

dnl handle common VMMC and MPS build - default is one common VMMC driver
WITH_MPS_CHECK


## Target host specific compilation flags
#case "${host}" in
#   mips_fp_be)
#      CFLAGS="$CFLAGS -fno-strict-aliasing -fno-common -fomit-frame-pointer \
#         -G 0 -mno-abicalls -fno-pic -pipe -mtune=r4600 -mips2 -Wa,--trap \
#         -DMODVERSIONS -DEXPORT_SYMTAB"
#      ;;
#   mips-linux)
#      CFLAGS="$CFLAGS -fno-strict-aliasing -fno-common -fomit-frame-pointer \
#         -G 0 -mno-abicalls -fno-pic -pipe -mtune=r4600 -mips2 -Wa,--trap \
#         -mlong-calls -DMODVERSIONS -DEXPORT_SYMTAB"
#      ;;
#   mipsel-linux)
#      CFLAGS="$CFLAGS -fno-strict-aliasing -fno-common -fomit-frame-pointer \
#         -mno-abicalls -fno-pic -pipe -mips2 -Wa,--trap  -Wa,--trap \
#         -D__linux__ -D_MIPS_ISA=6 -D_MIPS_SZLONG=32 -D_MIPS_SZPTR=32 \
#         -D_MIPS_SZINT=32 -D__MIPSEL__ -DUTS_MACHINE='"mips"' -mlong-calls"
#      ;;
#   powerpc-linux-uclibc)
#      CFLAGS="$CFLAGS -fno-strict-aliasing -fno-common -fomit-frame-pointer"
#      ;;
#   *)
#      ;;
#esac

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([src/Makefile])

AC_OUTPUT

echo \
"------------------------------------------------------------------------
drv_vmmc configuration:

  Source code location: ${srcdir}
  Compiler:             ${CC}
  Compiler flags:       ${CFLAGS}
  Host System Type:     ${host}
  Install path:         ${prefix}

  TAPI HL include path: ${HL_TAPI_INCL_PATH}
  MPS include path:     ${MPS_INCL_PATH}
  IFXOS include path:   ${IFXOS_INCL_PATH}
  KERNEL_INCL_PATH:     ${KERNEL_INCL_PATH}
  KERNEL_BUILD_PATH:    ${KERNEL_BUILD_PATH}
------------------------------------------------------------------------"
