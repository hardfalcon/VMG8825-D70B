diff --git a/Makefile.am b/Makefile.am
index 15836e9bc6a5190e89e0491cc08857f8db7f435a..669b046a3c24390bfe4f39edaa6286d39ac18208 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -36,8 +36,8 @@ EXTRA_DIST = CHANGES COPYING maketgz Makefile.dist curl-config.in	\
 
 bin_SCRIPTS = curl-config
 
-SUBDIRS = lib src
-DIST_SUBDIRS = $(SUBDIRS) tests include packages docs
+SUBDIRS = lib
+DIST_SUBDIRS = lib include docs
 
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = libcurl.pc
diff --git a/lib/ssluse.c b/lib/ssluse.c
index d9cf382907f36629aebc943ce9089cef91b1f37b..eb9303d84617014f8045b6b4cd4f013da1fcaf51 100644
--- a/lib/ssluse.c
+++ b/lib/ssluse.c
@@ -521,6 +521,7 @@ int cert_stuff(struct connectdata *conn,
       }
       break;
     case SSL_FILETYPE_ENGINE:
+#if 0
 #ifdef HAVE_OPENSSL_ENGINE_H
       {                         /* XXXX still needs some work */
         EVP_PKEY *priv_key = NULL;
@@ -553,6 +554,7 @@ int cert_stuff(struct connectdata *conn,
       }
       break;
 #else
+#endif /* 0 */
       failf(data, "file type ENG for private key not supported");
       return 0;
 #endif
@@ -745,7 +747,7 @@ int Curl_ossl_check_cxn(struct connectdata *conn)
  */
 CURLcode Curl_ossl_set_engine(struct SessionHandle *data, const char *engine)
 {
-#if defined(USE_SSLEAY) && defined(HAVE_OPENSSL_ENGINE_H)
+#if 0
   ENGINE *e;
 
 #if OPENSSL_VERSION_NUMBER >= 0x00909000L
@@ -790,7 +792,7 @@ CURLcode Curl_ossl_set_engine(struct SessionHandle *data, const char *engine)
  */
 CURLcode Curl_ossl_set_engine_default(struct SessionHandle *data)
 {
-#ifdef HAVE_OPENSSL_ENGINE_H
+#if 0
   if(data->state.engine) {
     if(ENGINE_set_default(data->state.engine, ENGINE_METHOD_ALL) > 0) {
       infof(data,"set default crypto engine '%s'\n", ENGINE_get_id(data->state.engine));
@@ -811,7 +813,7 @@ CURLcode Curl_ossl_set_engine_default(struct SessionHandle *data)
 struct curl_slist *Curl_ossl_engines_list(struct SessionHandle *data)
 {
   struct curl_slist *list = NULL;
-#if defined(USE_SSLEAY) && defined(HAVE_OPENSSL_ENGINE_H)
+#if 0
   struct curl_slist *beg = NULL;
   ENGINE *e;
 
@@ -973,7 +975,7 @@ int Curl_ossl_close_all(struct SessionHandle *data)
   */
   ERR_remove_state(0);
 
-#ifdef HAVE_OPENSSL_ENGINE_H
+#if 0
   if(data->state.engine) {
     ENGINE_finish(data->state.engine);
     ENGINE_free(data->state.engine);
@@ -1443,18 +1445,10 @@ ossl_connect_step1(struct connectdata *conn,
   switch(data->set.ssl.version) {
   default:
   case CURL_SSLVERSION_DEFAULT:
-    /* we try to figure out version */
-    req_method = SSLv23_client_method();
-    use_sni(TRUE);
-    break;
   case CURL_SSLVERSION_TLSv1:
     req_method = TLSv1_client_method();
     use_sni(TRUE);
     break;
-  case CURL_SSLVERSION_SSLv2:
-    req_method = SSLv2_client_method();
-    use_sni(FALSE);
-    break;
   case CURL_SSLVERSION_SSLv3:
     req_method = SSLv3_client_method();
     use_sni(FALSE);
diff --git a/lib/strerror.c b/lib/strerror.c
index 673e89c1f2f4ec96b9cbea554dc6e6140902e6d4..09246d0fcfc2d7c0ec4053f08ec3586b3253fc13 100644
--- a/lib/strerror.c
+++ b/lib/strerror.c
@@ -179,6 +179,7 @@ curl_easy_strerror(CURLcode error)
   case CURLE_GOT_NOTHING:
     return "Server returned nothing (no headers, no data)";
 
+#if 0
   case CURLE_SSL_ENGINE_NOTFOUND:
     return "SSL crypto engine not found";
 
@@ -187,6 +188,7 @@ curl_easy_strerror(CURLcode error)
 
   case CURLE_SSL_ENGINE_INITFAILED:
     return "Failed to initialise SSL crypto engine";
+#endif /* 0 */
 
   case CURLE_SEND_ERROR:
     return "Failed sending data to the peer";
