From: Maik Dybek <maik.dybek@sphairon.com>
Date: Wed, 26 May 2010 14:55:28 +0200
Subject: br2684: cmdline option -k to end the appropriate daemon process

Add option -k num to give the possibility to kill a br2684ctl daemonized
process with command line arguments. So there is no need to create a kill
wrapper.
---
 src/br2684/br2684ctl.c | 107 +++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 104 insertions(+), 3 deletions(-)

diff --git a/src/br2684/br2684ctl.c b/src/br2684/br2684ctl.c
index 475661c..3f0a607 100644
--- a/src/br2684/br2684ctl.c
+++ b/src/br2684/br2684ctl.c
@@ -4,9 +4,11 @@
 #include <errno.h>
 #include <sys/ioctl.h>
 #include <sys/types.h>
+#include <sys/stat.h>
 #include <signal.h>
 #include <string.h>
 #include <syslog.h>
+#include <fcntl.h>
 #include <atm.h>
 #include <linux/atmdev.h>
 #include <linux/atmbr2684.h>
@@ -64,6 +66,51 @@ void int_signal(int dummy)
   exit(0);
 }
 
+ssize_t open_read_close(const char *filename, void *buf, size_t size)
+{
+  int fd = open(filename, O_RDONLY);
+  if (fd < 0)
+    return fd;
+  size = read(fd, buf, size);
+  close(fd);
+  return size;
+}
+
+static int pid_is_exec(pid_t pid)
+{
+  ssize_t bytes;
+  char buf[PATH_MAX];
+
+  sprintf(buf, "/proc/%u/cmdline", (unsigned)pid);
+  bytes = open_read_close(buf, buf, sizeof(buf) - 1);
+  if (bytes > 0) {
+      return bytes;
+  }
+  return 0;
+}
+
+static int pid_is_user(int pid)
+{
+  struct stat sb;
+  char buf[sizeof("/proc/") + sizeof(int)*3];
+
+  sprintf(buf, "/proc/%u", (unsigned)pid);
+  if (stat(buf, &sb) != 0)
+    return 0;
+  return (sb.st_uid == geteuid());
+}
+
+static int check_pid(int pid)
+{
+  if (!pid_is_exec(pid)) {
+    return -1;
+  }
+  if (!pid_is_user(pid)) {
+    return -1;
+  }
+  return 0;
+}
+
 int create_pidfile(int num)
 {
   FILE *pidfile = NULL;
@@ -80,6 +127,52 @@ int create_pidfile(int num)
   return 0;
 }
 
+int remove_pidfile(int num)
+{
+  char name[32]={0};
+
+  if (num < 0) return -1;
+
+  snprintf(name, 32, "/var/run/br2684ctl-nas%d.pid", num);
+  if (unlink(name)==-1) {
+      syslog(LOG_ERR, "pid file removal failed on %s: %s",name,strerror(errno));
+      return -1;
+  }
+
+  return 0;
+}
+
+int read_pidfile(int num)
+{
+  FILE *pidfile = NULL;
+  char name[32]={0};
+  int pid;
+
+  if (num < 0) return -1;
+
+  snprintf(name, 32, "/var/run/br2684ctl-nas%d.pid", num);
+
+  pidfile = fopen(name, "r");
+  if (pidfile == NULL) return -1;
+  if (fscanf(pidfile, "%u", &pid) == 1) {
+    if(check_pid(pid)<0)
+	pid=-1;
+  }
+  fclose(pidfile);
+
+  return pid;
+}
+
+void kill_daemon(int num)
+{
+  pid_t pid=read_pidfile(num);
+  if (pid > 0) {
+    syslog(LOG_NOTICE, "Send SIGTERM to process br2684ctl id: %d\n", pid);
+    kill(pid,SIGTERM);
+  }
+  return;
+}
+
 int create_br(int itfnum, int payload)
 {
   int err;
@@ -207,7 +300,7 @@ void start_interface(struct br2684_params* params)
 
 void usage(char *s)
 {
-  printf("usage: %s [-b] [[-c number] [-e 0|1|2|3] [-s sndbuf] [-q qos] [-p 0|1] "
+  printf("usage: %s [-k number] | [-b] [[-c number] [-e 0|1|2|3] [-s sndbuf] [-q qos] [-p 0|1] "
 	 "[-a [itf.]vpi.vci]*]*\n", s);
   printf("  encapsulations: 0=llc, 1=vcmux, 2=llc_fcs, 3=vc_fcs\n  payloads: 0=routed, 1=bridged\n");
   exit(1);
@@ -217,7 +310,7 @@ void usage(char *s)
 
 int main (int argc, char **argv)
 {
-  int c, background=0;
+  int c, background=0, num=-1;
 
   struct br2684_params params;
   params.itfnum=-1;
@@ -234,7 +327,7 @@ int main (int argc, char **argv)
 
   openlog (LOG_NAME,LOG_OPTION,LOG_FACILITY);
   if (argc>1)
-    while ((c = getopt(argc, argv,"q:a:bc:e:s:p:?h")) !=EOF)
+    while ((c = getopt(argc, argv,"q:a:bc:e:k:s:p:?h")) !=EOF)
       switch (c) {
       case 'q':
 	printf ("optarg : %s",optarg);
@@ -259,6 +352,14 @@ int main (int argc, char **argv)
 	  params.encap=0;
 	}
 	break;
+      case 'k':
+	num= atoi(optarg);
+	if (num<0) {
+	    syslog (LOG_ERR, "invalid id to kill: %s", optarg);
+	}
+	kill_daemon(num);
+	return 0;
+	break;
       case 's':
 	params.sndbuf=(atoi(optarg));
 	if(params.sndbuf<0){
--

