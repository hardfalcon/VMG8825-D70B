From: Daniel Egger <daniel.egger@sphairon.com>
Date: Mon, 14 Feb 2011 18:05:49 +0100
Subject: Added plugin for VF credential handling.

---
 pppd/plugins/Makefile.linux |   2 +-
 pppd/plugins/sas_vf_cred.c  | 435 ++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 436 insertions(+), 1 deletion(-)
 create mode 100644 pppd/plugins/sas_vf_cred.c

diff --git a/pppd/plugins/Makefile.linux b/pppd/plugins/Makefile.linux
index ac54153..64de83c 100644
--- a/pppd/plugins/Makefile.linux
+++ b/pppd/plugins/Makefile.linux
@@ -14,7 +14,7 @@ SUBDIRS := pppoatm
 # Uncomment the next line to include the radius authentication plugin
 #SUBDIRS += radius
 #PLUGINS := minconn.so passprompt.so passwordfd.so winbind.so
-PLUGINS := idlexmitonly.so holdoff_exp.so
+PLUGINS := idlexmitonly.so holdoff_exp.so sas_vf_cred.so
 
 # include dependencies if present
 ifeq (.depend,$(wildcard .depend))
diff --git a/pppd/plugins/sas_vf_cred.c b/pppd/plugins/sas_vf_cred.c
new file mode 100644
index 0000000..415dc7f
--- /dev/null
+++ b/pppd/plugins/sas_vf_cred.c
@@ -0,0 +1,435 @@
+/*
+ * sas_vf_cred.c - pppd plugin to control change of credetials in case of auth error
+ */
+
+#include <stddef.h>
+#include <string.h>
+#include <time.h>
+#include "pppd.h"
+
+#define MAXCREDENTIALS 10
+
+extern int  if_status;       // is SAS specific variable of pppd (by patch 104SAS_addons.diff)
+extern bool explicit_user;   // is set in auth.c, if option "user" was given
+extern bool explicit_passwd; // is set in auth.c, if option "password" was given
+
+char  cred_user[MAXCREDENTIALS][MAXNAMELEN];
+char  cred_passwd[MAXCREDENTIALS][MAXSECRETLEN];
+bool  cred_explicit_user[MAXCREDENTIALS];
+bool  cred_explicit_passwd[MAXCREDENTIALS];
+int   auth_fail_count;
+int   curr_idx;
+bool  first_time;
+bool  wr_idx_trigger;
+
+// ATTENTION: the number of options user<x>/password<x> must fit MAXCREDENTIALS!
+static option_t Options[] = {
+
+    { "user1", o_string, cred_user[0],
+      "Set 1st name for auth with peer", OPT_PRIO | OPT_STATIC,
+      &(cred_explicit_user[0]), MAXNAMELEN },
+
+    { "password1", o_string, cred_passwd[0],
+      "1st password for authenticating us to the peer",
+      OPT_PRIO | OPT_STATIC | OPT_HIDE,
+      &(cred_explicit_passwd[0]), MAXSECRETLEN },
+
+    { "user2", o_string, cred_user[1],
+      "Set 2nd name for auth with peer", OPT_PRIO | OPT_STATIC,
+      &(cred_explicit_user[1]), MAXNAMELEN },
+
+    { "password2", o_string, cred_passwd[1],
+      "2nd password for authenticating us to the peer",
+      OPT_PRIO | OPT_STATIC | OPT_HIDE,
+      &(cred_explicit_passwd[1]), MAXSECRETLEN },
+
+    { "user3", o_string, cred_user[2],
+      "Set 3th name for auth with peer", OPT_PRIO | OPT_STATIC,
+      &(cred_explicit_user[2]), MAXNAMELEN },
+
+    { "password3", o_string, cred_passwd[2],
+      "3th password for authenticating us to the peer",
+      OPT_PRIO | OPT_STATIC | OPT_HIDE,
+      &(cred_explicit_passwd[2]), MAXSECRETLEN },
+
+    { "user4", o_string, cred_user[3],
+      "Set 4th name for auth with peer", OPT_PRIO | OPT_STATIC,
+      &(cred_explicit_user[3]), MAXNAMELEN },
+
+    { "password4", o_string, cred_passwd[3],
+      "4th password for authenticating us to the peer",
+      OPT_PRIO | OPT_STATIC | OPT_HIDE,
+      &(cred_explicit_passwd[3]), MAXSECRETLEN },
+
+    { "user5", o_string, cred_user[4],
+      "Set 5th name for auth with peer", OPT_PRIO | OPT_STATIC,
+      &(cred_explicit_user[4]), MAXNAMELEN },
+
+    { "password5", o_string, cred_passwd[4],
+      "5th password for authenticating us to the peer",
+      OPT_PRIO | OPT_STATIC | OPT_HIDE,
+      &(cred_explicit_passwd[4]), MAXSECRETLEN },
+
+    { "user6", o_string, cred_user[5],
+      "Set 6th name for auth with peer", OPT_PRIO | OPT_STATIC,
+      &(cred_explicit_user[5]), MAXNAMELEN },
+
+    { "password6", o_string, cred_passwd[5],
+      "6th password for authenticating us to the peer",
+      OPT_PRIO | OPT_STATIC | OPT_HIDE,
+      &(cred_explicit_passwd[5]), MAXSECRETLEN },
+
+    { "user7", o_string, cred_user[6],
+      "Set 7th name for auth with peer", OPT_PRIO | OPT_STATIC,
+      &(cred_explicit_user[6]), MAXNAMELEN },
+
+    { "password7", o_string, cred_passwd[6],
+      "7th password for authenticating us to the peer",
+      OPT_PRIO | OPT_STATIC | OPT_HIDE,
+      &(cred_explicit_passwd[6]), MAXSECRETLEN },
+
+    { "user8", o_string, cred_user[7],
+      "Set 8th name for auth with peer", OPT_PRIO | OPT_STATIC,
+      &(cred_explicit_user[7]), MAXNAMELEN },
+
+    { "password8", o_string, cred_passwd[7],
+      "8th password for authenticating us to the peer",
+      OPT_PRIO | OPT_STATIC | OPT_HIDE,
+      &(cred_explicit_passwd[7]), MAXSECRETLEN },
+
+    { "user9", o_string, cred_user[8],
+      "Set 9th name for auth with peer", OPT_PRIO | OPT_STATIC,
+      &(cred_explicit_user[8]), MAXNAMELEN },
+
+    { "password9", o_string, cred_passwd[8],
+      "9th password for authenticating us to the peer",
+      OPT_PRIO | OPT_STATIC | OPT_HIDE,
+      &(cred_explicit_passwd[8]), MAXSECRETLEN },
+
+    { "user10", o_string, cred_user[9],
+      "Set 10th name for auth with peer", OPT_PRIO | OPT_STATIC,
+      &(cred_explicit_user[9]), MAXNAMELEN },
+
+    { "password10", o_string, cred_passwd[9],
+      "10th password for authenticating us to the peer",
+      OPT_PRIO | OPT_STATIC | OPT_HIDE,
+      &(cred_explicit_passwd[9]), MAXSECRETLEN },
+
+    { NULL }
+};
+
+
+const char pppd_version[] = VERSION;
+/*
+const char sP_DEAD        []="DEAD";
+const char sP_INITIALIZE  []="INITIALIZE";
+const char sP_SERIALCONN  []="SERIALCONN";
+const char sP_DORMANT     []="DORMANT";
+const char sP_ESTABLISH   []="ESTABLISH";
+const char sP_AUTHENTICATE[]="AUTHENTICATE";
+const char sP_CALLBACK    []="CALLBACK";
+const char sP_NETWORK     []="NETWORK";
+const char sP_RUNNING     []="RUNNING";
+const char sP_TERMINATE   []="TERMINATE";
+const char sP_DISCONNECT  []="DISCONNECT";
+const char sP_HOLDOFF     []="HOLDOFF";
+const char sP_MASTER      []="MASTER";
+
+const char sE_OK                []="OK";
+const char sE_FATAL_ERROR       []="FATAL_ERROR";
+const char sE_OPTION_ERROR      []="OPTION_ERROR";
+const char sE_NOT_ROOT          []="NOT_ROOT";
+const char sE_NO_KERNEL_SUPPORT []="NO_KERNEL_SUPPORT";
+const char sE_USER_REQUEST      []="USER_REQUEST";
+const char sE_LOCK_FAILED       []="LOCK_FAILED";
+const char sE_OPEN_FAILED       []="OPEN_FAILED";
+const char sE_CONNECT_FAILED    []="CONNECT_FAILED";
+const char sE_PTYCMD_FAILED     []="PTYCMD_FAILED";
+const char sE_NEGOTIATION_FAILED[]="NEGOTIATION_FAILED";
+const char sE_PEER_AUTH_FAILED  []="PEER_AUTH_FAILED";
+const char sE_IDLE_TIMEOUT      []="IDLE_TIMEOUT";
+const char sE_CONNECT_TIME      []="CONNECT_TIME";
+const char sE_CALLBACK          []="CALLBACK ";
+const char sE_PEER_DEAD         []="PEER_DEAD";
+const char sE_HANGUP            []="HANGUP";
+const char sE_LOOPBACK          []="LOOPBACK";
+const char sE_INIT_FAILED       []="INIT_FAILED";
+const char sE_AUTH_TOPEER_FAILED[]="AUTH_TOPEER_FAILED";
+#ifdef MAXOCTETS
+const char sE_TRAFFIC_LIMIT     []="TRAFFIC_LIMIT";
+#endif
+const char sE_CNID_AUTH_FAILED  []="CNID_AUTH_FAILED";
+
+const char s_UNKNOWN[]="UNKNOWN";
+
+static const char* exit2txt(int e)
+{
+  	switch( e )
+    {
+        case EXIT_OK                : return sE_OK;
+        case EXIT_FATAL_ERROR       : return sE_FATAL_ERROR;
+        case EXIT_OPTION_ERROR      : return sE_OPTION_ERROR;
+        case EXIT_NOT_ROOT          : return sE_NOT_ROOT;
+        case EXIT_NO_KERNEL_SUPPORT : return sE_NO_KERNEL_SUPPORT;
+        case EXIT_USER_REQUEST      : return sE_USER_REQUEST;
+        case EXIT_LOCK_FAILED       : return sE_LOCK_FAILED;
+        case EXIT_OPEN_FAILED       : return sE_OPEN_FAILED;
+        case EXIT_CONNECT_FAILED    : return sE_CONNECT_FAILED;
+        case EXIT_PTYCMD_FAILED     : return sE_PTYCMD_FAILED;
+        case EXIT_NEGOTIATION_FAILED: return sE_NEGOTIATION_FAILED;
+        case EXIT_PEER_AUTH_FAILED  : return sE_PEER_AUTH_FAILED;
+        case EXIT_IDLE_TIMEOUT      : return sE_IDLE_TIMEOUT;
+        case EXIT_CONNECT_TIME      : return sE_CONNECT_TIME;
+        case EXIT_CALLBACK          : return sE_CALLBACK;
+        case EXIT_PEER_DEAD         : return sE_PEER_DEAD;
+        case EXIT_HANGUP            : return sE_HANGUP;
+        case EXIT_LOOPBACK          : return sE_LOOPBACK;
+        case EXIT_INIT_FAILED       : return sE_INIT_FAILED;
+        case EXIT_AUTH_TOPEER_FAILED: return sE_AUTH_TOPEER_FAILED;
+#ifdef MAXOCTETS
+        case EXIT_TRAFFIC_LIMIT     : return sE_TRAFFIC_LIMIT;
+#endif
+        case EXIT_CNID_AUTH_FAILED  : return sE_CNID_AUTH_FAILED;
+    }
+    return s_UNKNOWN;
+}
+
+
+static const char* phase2txt(int p)
+{
+
+  	switch( p )
+    {
+        case PHASE_DEAD:        return sP_DEAD;
+        case PHASE_INITIALIZE:  return sP_INITIALIZE;
+        case PHASE_SERIALCONN:  return sP_SERIALCONN;
+        case PHASE_DORMANT:     return sP_DORMANT;
+        case PHASE_ESTABLISH:   return sP_ESTABLISH;
+        case PHASE_AUTHENTICATE:return sP_AUTHENTICATE;
+        case PHASE_CALLBACK:    return sP_CALLBACK;
+        case PHASE_NETWORK:     return sP_NETWORK;
+        case PHASE_RUNNING:     return sP_RUNNING;
+        case PHASE_TERMINATE:   return sP_TERMINATE;
+        case PHASE_DISCONNECT:  return sP_DISCONNECT;
+        case PHASE_HOLDOFF:     return sP_HOLDOFF;
+        case PHASE_MASTER:      return sP_MASTER;
+   }
+   return s_UNKNOWN;
+}
+*/
+void write_curr_idx( void )
+{
+    FILE *fp;
+    char filename[32];
+
+    snprintf(filename, sizeof(filename), "/tmp/pppd%d_credentials", req_unit);
+
+    fp = fopen(filename, "w");
+    if (fp != NULL)
+    {
+        fprintf(fp, "%d", curr_idx);
+        fclose(fp);
+    }
+}
+
+int my_holdoff_hook( void )
+{
+	info("sas_vf_cred: holdoff hook called (holdoff 10s)");
+
+	return 10;
+}
+
+void my_phasechange(void *opaque, int arg)
+{
+    int i;
+
+//	info("sas_vf_cred: phasechange: new phase %s (%d) (if_status=%d)",phase2txt(arg),arg,if_status);
+
+    // PHASE_SERIALCONN: ppp device connected
+    // do credential handling here
+    if( arg == PHASE_SERIALCONN )
+    {
+        // on first time check user and password given as "user" "password" to get the start value of curr_idx
+        if( first_time )
+        {
+            first_time     = 0;
+            wr_idx_trigger = 1;
+
+            for( i = 0; i < MAXCREDENTIALS; )
+            {
+                if( cred_explicit_user[i] )
+                {
+                    if( 0 == strncmp( cred_user[i], user, MAXNAMELEN ) )
+                    {
+                        if( 0 == strncmp( cred_passwd[i], passwd, MAXSECRETLEN ) )
+                        {
+                            curr_idx = i;
+                            break;
+                        }
+                    }
+                }
+                i++;
+            }
+            if( i == MAXCREDENTIALS )
+            {
+                error("sas_vf_cred: start values for user=%s not found in given list! Force credentials start index =%d (user=%s)",user,curr_idx,cred_user[curr_idx]);
+                strncpy(user,  cred_user[  curr_idx],MAXNAMELEN);
+                strncpy(passwd,cred_passwd[curr_idx],MAXSECRETLEN);
+            }
+            else
+                info("sas_vf_cred: credentials start index =%d (user=%s)",curr_idx,cred_user[curr_idx]);
+            // independend from "user" "password" given as option to pppd or not, this plugin handles always
+            // explicit given options (overwrite the "explicit" values set by the pppd options)
+            explicit_user   = 1; // simulate option "user" was given
+            explicit_passwd = 1; // simulate option "password" was given
+        }
+        if( auth_fail_count >= 5 )
+        {
+            auth_fail_count = 0;
+            // search the next credentials to be used
+            for( i = 0; i < MAXCREDENTIALS; i++ )
+            {
+                 curr_idx++;                                     // increment and
+                 if( curr_idx >= MAXCREDENTIALS ) curr_idx = 0;  // wrap around
+                 if( cred_explicit_user[curr_idx] ) break;       // user<x> explicitely given (might be empty string!)
+            }
+            strncpy(user,  cred_user[  curr_idx],MAXNAMELEN);
+            strncpy(passwd,cred_passwd[curr_idx],MAXSECRETLEN);
+            wr_idx_trigger = 1;
+            info("sas_vf_cred: credentials index for next try =%d (user=%s)",curr_idx,cred_user[curr_idx]);
+        }
+
+        if( wr_idx_trigger )
+        {
+            wr_idx_trigger = 0;
+            write_curr_idx();
+        }
+    }
+
+    // DISCONNECT happens after
+    // - authentication fault
+    // - pppd stopped
+    // - inactivity timeout (dial on demand)
+    if( arg == PHASE_DISCONNECT )
+    {
+        // check authentication fault and count or reset
+        if( if_status == 3 )
+            auth_fail_count++;
+        else
+            auth_fail_count = 0;
+    }
+
+}
+
+/*
+int my_pap_passwd_hook(char *user, char *passwd)
+{
+    int i;
+    char * u[32];
+    char * p[32];
+
+    for(i=0;i<31;i++)u[i]=user[i];
+    u[31]=0;
+    for(i=0;i<31;i++)p[i]=passwd[i];
+    p[31]=0;
+
+	info("sas_vf_cred pap_passwd_hook called: user %s, passwd %s",u,p);
+
+
+    return -1;
+}
+
+int my_chap_passwd_hook(char *user, char *passwd)
+{
+    int i;
+    char * u[32];
+    char * p[32];
+
+    for(i=0;i<31;i++)u[i]=user[i];
+    u[31]=0;
+    for(i=0;i<31;i++)p[i]=passwd[i];
+    p[31]=0;
+
+	info("sas_vf_cred chap_passwd_hook called: user %s, passwd %s",u,p);
+
+
+    return -1;
+}
+
+void my_auth_up_notifier(void *opaque, int arg)
+{
+
+	info("sas_vf_cred auth_up_notifier called: arg =%d",arg);
+
+}
+
+void my_ip_up_notifier(void *opaque, int arg)
+{
+
+	info("sas_vf_cred: ip_up_notifier called");
+
+}
+
+void my_exitnotify(void *opaque, int arg)
+{
+
+	info("sas_vf_cred exitnotify called: status %s (%d)",exit2txt(arg),arg);
+
+}
+*/
+
+void plugin_init(void)
+{
+	int i;
+
+    auth_fail_count = 0;
+    curr_idx        = 0;
+    first_time      = 1;
+    wr_idx_trigger  = 0;
+
+
+/*
+    if( pap_passwd_hook != NULL )
+    {
+        error("Plugin sas_vf_cred: Could not register pap_passwd_hook, is already used!");
+    }
+	else
+    {
+	    pap_passwd_hook  = my_pap_passwd_hook;
+    }
+    if( chap_passwd_hook != NULL )
+    {
+        error("Plugin sas_vf_cred: Could not register chap_passwd_hook, is already used!");
+    }
+    else
+    {
+	    chap_passwd_hook = my_chap_passwd_hook;
+    }
+*/
+	if( holdoff_hook )
+	{
+		error("Plugin sas_vf_cred: Could not register holdoff_hook, is already used!");
+	}
+    else
+    {
+        holdoff_hook = my_holdoff_hook;
+    }
+    for( i = 0; i < MAXCREDENTIALS; i++ )
+    {
+        cred_user[i][0]         = 0;
+        cred_passwd[i][0]       = 0;
+        cred_explicit_user[i]   = 0;
+        cred_explicit_passwd[i] = 0;
+
+    }
+
+    add_options(Options);
+
+	add_notifier( &phasechange,      my_phasechange, 0 );
+//	add_notifier( &auth_up_notifier, my_auth_up_notifier, 0 );
+//	add_notifier( &ip_up_notifier,   my_ip_up_notifier, 0 );
+//	add_notifier( &exitnotify,       my_exitnotify, 0 );
+
+
+	info("Plugin sas_vf_cred initialized.");
+}
--

