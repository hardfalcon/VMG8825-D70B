##############################################################################
# File:      Makefile
# Purpose:   Central make file including all build steps
# Remarks:   This makefile is not part of the build process. It is for
#            convenience only in order to build a particular subsystem.
#
# Copyright: Copyright (C) 2006-2007, Sphairon Access Systems GmbH
#
# Author:    Frank Stebich
# Created:   09.11.2006
# Updated:   Thomas Haak, 21.12.2007
##############################################################################

# get the current SAS workspace root folder (i.e. the folder above us
# containing the directory 'iad')
SAS_WORKSPACE_ROOT ?= $(firstword $(subst /iad/, ,$(CURDIR)))
export SAS_WORKSPACE_ROOT

include $(SAS_WORKSPACE_ROOT)/paths.mk

MAKEFLAGS := --no-print-directory

all:		image

##############################################################################
# Creates images for download to the target
##############################################################################

image:		install
		@+$(MAKE) -f image.mk \
			SAS_CONFIG=$(SAS_CONFIG)

##############################################################################
# Analyses test coverage and produces a test coverage report
##############################################################################

ifeq ($(strip $(wildcard coverage.mk)),)
coverage:
		@echo ">>> Make target coverage not supported by this module <<<"
else
ifeq ($(SAS_TOOLCHAIN),$(SAS_HOST_TOOLCHAIN))
# Coverage needs a compiled binary as a precondition and then will execute the
# test runner, which execution will generate the necessary data for coverage
# analysis. Coverage then produces a report out of the coverage data
# generated by the test runner.
# We don't perform the test make step here, because we want coverage
# information to be generated even when a test has failed.
coverage:	cov_compile
		@+$(MAKE) -f coverage.mk \
			SAS_CONFIG=$(SAS_CONFIG)
else
coverage:
		@echo ">>> Coverage only works for on hosts <<<"
endif
endif

##############################################################################
# Performs memory error analysis, including memory leak analysis
##############################################################################

ifeq ($(strip $(wildcard memcheck.mk)),)
memcheck:
		@echo ">>> Make target memcheck not supported by this module <<<"
else
# memcheck only needs compile as a precondition because it runs the test or
# application as part of the memory check anyway
memcheck:	compile
		@+$(MAKE) -f memcheck.mk \
			SAS_CONFIG=$(SAS_CONFIG)
endif

##############################################################################
# Executes unit tests on the compiled artefacts
##############################################################################

test:		compile
		@+$(MAKE) -f test.mk \
			SAS_CONFIG=$(SAS_CONFIG)

##############################################################################
# Installs compiled artefacts into the right places in the root filesystem
##############################################################################

install:	compile
		@+$(MAKE) -f install.mk \
			SAS_CONFIG=$(SAS_CONFIG)

##############################################################################
# Compiles artefacts and puts the into the folder for build outputs. External
# software packages may create a folder structure inside the build output
# folder
##############################################################################

compile:	generate
		@+$(MAKE) -f compile.mk \
			SAS_CONFIG=$(SAS_CONFIG)

##############################################################################
# Compiles artefacts and puts the into the folder for build outputs. External
# software packages may create a folder structure inside the build output
# folder. During compilation code is instructed with information used for
# coverage analysis
##############################################################################

cov_compile:	generate
		@+$(MAKE) -f compile.mk \
			SAS_CONFIG=$(SAS_CONFIG) \
			SAS_TEST_COVERAGE=yes

clang_compile:	generate
		@+$(MAKE) -f compile.mk \
			SAS_CONFIG=$(SAS_CONFIG) \
			SAS_CLANG_ANALYZE=yes

cppcheck_compile:	generate
		@+$(MAKE) -f compile.mk \
			SAS_CONFIG=$(SAS_CONFIG) \
			SAS_CPPCHECK_ANALYZE=yes

##############################################################################
# Creates a file with dependencies between source files
##############################################################################

depend:

##############################################################################
# Generates API software documentation from source code
##############################################################################

doc:		generate
		@+$(MAKE) -f doc.mk \
			SAS_CONFIG=$(SAS_CONFIG)

##############################################################################
# Generates from meta languages header and source files for the compilation
# process
##############################################################################

generate:	configure
		@+$(MAKE) -f generate.mk \
			SAS_CONFIG=$(SAS_CONFIG)

##############################################################################
# Configures the subsystem for platform and/or customer-specifc compilation
##############################################################################

configure:	prepare
		@+$(MAKE) -f configure.mk \
			SAS_CONFIG=$(SAS_CONFIG)

##############################################################################
# Executes preparative steps for the subsystem
##############################################################################

prepare:
		@+$(MAKE) -f prepare.mk \
			SAS_CONFIG=$(SAS_CONFIG)

##############################################################################
# Cleans all artefacts created as part of a previous make process
##############################################################################

clean:
		@+$(MAKE) -f clean.mk \
			SAS_CONFIG=$(SAS_CONFIG)

